package automat;

import lime.app.Application;

import automat.Pos.xy as P;

class TestAutomat extends Application {


	public function new() {
		super();
		
		/*
		// -------- test Pos ----------
		trace(Pos.xMax, Pos.yMax);
		var p = new Pos(36,4);
		trace("pos:",p.x,p.y);
		p = Pos.xy(4,5);
		trace("pos:",p.x,p.y);
		
		trace("pos:", P(23, 42) );
		*/

		// -------- test cell ----------
		/*
		var c0 = new Cell(WATER,42);
		c0.actor = 5;
		trace(c0);
		trace("TYPE:", (c0.type:Int));
		trace("PARAM:",(c0.param:Int));
		trace("cell and type isSolid:", c0.isSolid, c0.type.isSolid);
		trace("cell and type isFluid:",c0.isFluid, c0.type.isFluid);
		trace("cell and type isGas:",c0.isGas, c0.type.isGas);
		*/

		// -------- test MainActorList ----------
		var mainActorList = new MainActorList(3);

		trace("add Actor 0 at index:" + mainActorList.add(new Actor("Actor 0")));
		trace("add Actor 1 at index:" + mainActorList.add(new Actor("Actor 1")));
		trace("add Actor 2 at index:" + mainActorList.add(new Actor("Actor 2")));
		trace("get at index 0:" + mainActorList.get(0).name);
		trace("get at index 1:" + mainActorList.get(1).name);
		trace("get at index 2:" + mainActorList.get(2).name);
		trace("length", mainActorList.length, "\n-----");
		
		trace("remove at index 1" ); mainActorList.remove(1);
		trace("remove at index 0" ); mainActorList.remove(0);
		trace("length", mainActorList.length, "\n-----");

		trace("add Actor 3 at index:" + mainActorList.add(new Actor("Actor 3")));
		trace("add Actor 4 at index:" + mainActorList.add(new Actor("Actor 4")));
		trace("remove at index 2" ); mainActorList.remove(2);
		trace("add Actor 5 at index:" + mainActorList.add(new Actor("Actor 5")));

		trace("get at index 0:" + mainActorList.get(0).name);
		trace("get at index 1:" + mainActorList.get(1).name);
		trace("get at index 2:" + mainActorList.get(2).name);
		trace("length", mainActorList.length);

		/*
		// -------- test grid ----------
		var grid = new Grid();

		trace(Grid.WIDTH, Grid.HEIGHT);
		
		var c0 = new Cell(WATER,42);
		grid.set(new Pos(0,0), c0);
		grid.set(new Pos(0,1), 42);

		trace(grid.get(new Pos(0,0)));
		trace(grid.get(new Pos(0,1)));
		*/


		/*
		// -------- grid testdata ----------
		var grid = createTestGrid(TESTGRID);
		// trace(grid.get(new Pos(1,1)));

		grid.setAction(new Action(CELL_MOVE, new Pos(1,1)), 0); // immediadly
		grid.setAction(new Action(CELL_EMPTY, new Pos(3,4)), Grid.MAX_STEPS-1); // max delay time 

		// simmulate 10 timesteps
		for (i in 0...10) {
			trace('step $i');
			grid.step();
		}
		*/

		/*
		var t = haxe.Timer.stamp();
		var i:Int = 0;
		while (i < 1000000) {
			var actor = grid.getActor( new Pos(Std.random(64),Std.random(64)) );
			if ((actor:Int) < 132) actor++;
			grid.setActor( new Pos(Std.random(64),Std.random(64)) , actor );
			i+=1;
		}
		trace( (haxe.Timer.stamp() - t) );
		*/

	}


	// ----------------------------------------------------------------
	// ----------------------------------------------------------------
	// ----------------------------------------------------------------

	public static function createTestGrid(testGrid:String):Grid
	{
		var grid = new Grid();

		testGrid = ~/\n+/g.replace(testGrid, "");

		for (i in 0...testGrid.length) {
			var c = testGrid.charAt(i);
			switch (c) {
				case ".": grid.set( i, new Cell(AIR) );
				case "*": grid.set( i, new Cell(METAL) );
				case "E": grid.set( i, new Cell(EARTH) );
				case "R": grid.set( i, new Cell(ROCK) );
				// TODO:
				// case "P": // grid.set( i, new Cell(AIR, new Actor(PLAYER) ));
				case "1": grid.set( i, new Cell(AIR)  );
				case "2": grid.set( i, new Cell(AIR)  );
				case "3": grid.set( i, new Cell(AIR)  );

				default: throw('unknown "$c" in TESTGRID');
			}
		}

		return grid;
	}

	public static inline var TESTGRID:String =
"
****************************************************************
*..............................................................*
*..............................................................*
*..EEEE....EEEEEE..............................................*
*.......................1...22....333..........................*
*.................RR........22....333..........................*
*..................RR.............333..........................*
*...................R..........................................*
*...................RRR........................................*
*...................RRRRREEEEEEEEEEEEEEEEE.....................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
*..............................................................*
****************************************************************
";

}
